<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">
	
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
		destroy-method="close"
		p:driverClassName="${db.driver}"
		p:url="${db.url}"
		p:username="${db.username}"
		p:password="${db.password}"	
	/>
	
	<bean id="mybatisConfig" class="org.apache.ibatis.session.Configuration" p:jdbcTypeForNull="NULL"/>
	<!-- xml 파일을 로드할 경우
	 p:configuration-ref="mybatisConfig"
	 p:configLocation="classpath:mybatis-config.xml"
	 -->
	
	<!--  p:mapperLocations : Mapper를 자동으로 스캔하는 명령  -->
	<!--  p:typeAliasesPackage : Type으로 사용될 객체의 Alias를 자동으로 생성하는 명령 -> Alias는 Class 명으로 생성 됨 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" 
		p:configuration-ref="mybatisConfig"
		p:mapperLocations="classpath:mappers/**/*.xml"
		p:typeAliasesPackage="walk.mvc.*.model.vo"
		p:dataSource-ref="dataSource"
	/>
	
	<!-- 실제 마이바티스에서 사용할 Session 정의 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate"
		c:sqlSessionFactory-ref="sqlSessionFactory"
	/>
	
	<!-- dao를 대처할 Mapper Scanning -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
		p:basePackage="walk.mvc.*.model.mapper"	
	/>
	
	
	<!-- 
	https://velog.io/@kdhyo/JavaTransactional-Annotation-%EC%95%8C%EA%B3%A0-%EC%93%B0%EC%9E%90-26her30h

	■ 트랜잭션 처리 방법 
		1) 선언적 트랜잭션 처리 방법
		<tx:advice id="txAdvice" transaction-manager="transactionManager">
			<tx:attributes>
				<tx:method name="insert*" rollback-for="Exception"/>
				<tx:method name="update*" rollback-for="Exception"/>
			</tx:attributes>
		</tx:advice>
			
		pointcut설정하기 
		<aop:config proxy-target-class="true">
			<aop:pointcut id="serviceMethod" 
			expression="execution(* com.kh.spring..*ServiceImpl.insert*(..))"/>
			<aop:advisor id="trasactionAdvisor" advice-ref="txAdvice" pointcut-ref="serviceMethod"/>
		</aop:config>
	  
	  2) 명시적 트랜잭션 처리 방법
	    @Transactional을 사용해서 처리하는 방법	    
	    	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
	    	설정 파일(servlet-context.xml)에 등록 후 트랜잭션 적용이 필요한 클래스나 메소드에 @Transactional을 붙여준다.
	 -->
	
</beans>
